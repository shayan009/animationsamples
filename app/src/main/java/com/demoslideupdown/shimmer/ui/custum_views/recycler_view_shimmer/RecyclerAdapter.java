package com.demoslideupdown.shimmer.ui.custum_views.recycler_view_shimmer;import android.graphics.drawable.Drawable;import android.support.annotation.NonNull;import android.view.LayoutInflater;import android.view.ViewGroup;import android.support.v7.widget.RecyclerView;import com.demoslideupdown.R;import com.demoslideupdown.shimmer.ui.custum_views.frame_layout.ShimmerLayout;public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerAdapter.RecyclerViewHolder> {    private int mItemCount;    private int mLayoutReference;    private int mShimmerAngle;    private int mShimmerColor;    private int mShimmerDuration;    private float mShimmerMaskWidth;    private boolean isAnimationReversed;    private Drawable mShimmerItemBackground;    @NonNull    @Override    public RecyclerViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        LayoutInflater inflater = LayoutInflater.from(parent.getContext());        RecyclerViewHolder RecyclerViewHolder = new RecyclerViewHolder(inflater, parent, mLayoutReference);        RecyclerViewHolder.setShimmerColor(mShimmerColor);        RecyclerViewHolder.setShimmerAngle(mShimmerAngle);        RecyclerViewHolder.setShimmerMaskWidth(mShimmerMaskWidth);        RecyclerViewHolder.setRecyclerViewHolderBackground(mShimmerItemBackground);        RecyclerViewHolder.setShimmerAnimationDuration(mShimmerDuration);        RecyclerViewHolder.setAnimationReversed(isAnimationReversed);        return RecyclerViewHolder;    }    @Override    public void onBindViewHolder(@NonNull RecyclerViewHolder holder, int position) {        holder.bind();    }    @Override    public int getItemCount() {        return mItemCount;    }    public void setMinItemCount(int itemCount) {        mItemCount = itemCount;    }    public void setShimmerAngle(int shimmerAngle) {        this.mShimmerAngle = shimmerAngle;    }    public void setShimmerColor(int shimmerColor) {        this.mShimmerColor = shimmerColor;    }    public void setShimmerMaskWidth(float maskWidth) {        this.mShimmerMaskWidth = maskWidth;    }    public void setShimmerItemBackground(Drawable shimmerItemBackground) {        this.mShimmerItemBackground = shimmerItemBackground;    }    public void setShimmerDuration(int mShimmerDuration) {        this.mShimmerDuration = mShimmerDuration;    }    public void setLayoutReference(int layoutReference) {        this.mLayoutReference = layoutReference;    }    public void setAnimationReversed(boolean animationReversed) {        this.isAnimationReversed = animationReversed;    }    class RecyclerViewHolder extends RecyclerView.ViewHolder {        private ShimmerLayout mShimmerLayout;        RecyclerViewHolder (LayoutInflater inflater, ViewGroup parent, int innerViewResId) {            super(inflater.inflate(R.layout.viewholder_shimmer, parent, false));            mShimmerLayout = (ShimmerLayout) itemView;            inflater.inflate(innerViewResId, mShimmerLayout, true);        }        void setShimmerAngle (int angle) {            mShimmerLayout.setShimmerAngle(angle);        }        void setShimmerColor (int color) {            mShimmerLayout.setShimmerColor(color);        }        public void setShimmerMaskWidth(float maskWidth) {            mShimmerLayout.setMaskWidth(maskWidth);        }        public void setRecyclerViewHolderBackground(Drawable viewHolderBackground) {            if (viewHolderBackground != null) {                setBackground(viewHolderBackground);            }        }        void setShimmerAnimationDuration (int duration) {            mShimmerLayout.setShimmerAnimationDuration(duration);        }        void setAnimationReversed (boolean animationReversed) {            mShimmerLayout.setAnimationReversed(animationReversed);        }        void bind () {            mShimmerLayout.startShimmerAnimation();        }        private void setBackground(Drawable background) {            mShimmerLayout.setBackground(background);        }    }}